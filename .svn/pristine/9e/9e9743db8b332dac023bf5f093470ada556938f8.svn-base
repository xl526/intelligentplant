package com.dp.intelligentplant.controller;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dp.intelligentplant.domain.Equipment;
import com.dp.intelligentplant.domain.EquipmentStatus;
import com.dp.intelligentplant.fbox.DefVO;
import com.dp.intelligentplant.fbox.FBoxConfig;
import com.dp.intelligentplant.fbox.FBoxHelper;
import com.dp.intelligentplant.service.api.EquipmentStatusService;
import com.dp.intelligentplant.util.PageVO;
import com.dp.intelligentplant.vo.EquipmentStatusVO;

@Controller
@RequestMapping("/fbox")
public class FBoxController {
	
	@Autowired
	private EquipmentStatusService equipmentStatusService;
	
	@RequestMapping("/page")
	@ResponseBody
	public Object page(PageVO<EquipmentStatus> pageVO, HttpServletRequest request) {
		String rangeTime = request.getParameter("rangeTime");
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		int len = 16;
		Date startTime = null;
		Date endTime = null;
		
		try {
			startTime = df.parse(rangeTime.substring(0, len));
			endTime = df.parse(rangeTime.substring(len + 3));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		EquipmentStatusVO equipmentStatusVO = new EquipmentStatusVO();
		equipmentStatusVO.setStartTime(startTime);
		equipmentStatusVO.setEndTime(endTime);
		
		Page<EquipmentStatus> page = equipmentStatusService.findByPageAndParams(pageVO, equipmentStatusVO);
		pageVO.setItemsCount(page.getTotalElements());
		pageVO.setData(page.getContent());
		return pageVO;
	}
	
	@RequestMapping("/dmon/def")
	@ResponseBody
	public Object def() {
		String accessToken = null;
		String result = null;
		List<DefVO> list = new ArrayList<DefVO>();
		
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
		ServletContext servletContext = webApplicationContext.getServletContext();
		Object obj = servletContext.getAttribute("accessToken");
		if (obj == null) {
			accessToken = FBoxHelper.login();
			servletContext.setAttribute("accessToken", accessToken);
		} else {
			accessToken = (String) obj;
		}
		
		for (String box_uid : FBoxConfig.BOX_UID_ARRAY) {
			result = FBoxHelper.listMonitoringSite(accessToken, box_uid);
			//token过期
			if (result.contains("Authorization has been denied for this request")) {
				accessToken = FBoxHelper.login();
				result = FBoxHelper.listMonitoringSite(accessToken, box_uid);
				servletContext.setAttribute("accessToken", accessToken);
			}
			JSONArray jsonArray = JSONArray.parseArray(result);
			
			for (Iterator<Object> iterator = jsonArray.iterator(); iterator.hasNext();) {
				JSONObject json = (JSONObject) iterator.next();
				
				JSONArray jsonArray1 = json.getJSONArray("dMonEntries");
				for (Iterator<Object> iterator1 = jsonArray1.iterator(); iterator1.hasNext();) {
					JSONObject json1 = (JSONObject) iterator1.next();
					
					DefVO defVO = new DefVO();
					defVO.setName(json1.getString("name"));
					defVO.setDesc(json1.getString("desc"));
					JSONObject src = json1.getJSONObject("src");
					defVO.setDeviceId(src.getString("deviceId"));
					
					list.add(defVO);
				}
			}
		}
		
		JSONObject resultJson = new JSONObject();
		resultJson.put("data", list);
		
		return resultJson;
	}
	
}
